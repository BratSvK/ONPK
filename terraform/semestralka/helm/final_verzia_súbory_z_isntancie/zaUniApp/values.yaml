# Default values for webserver.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
  
configMap:
  name: &defaultConfigMap external-appconfig

env_fe:
  - name: REACT_APP_APIHOSTPORT
    configMapName: *defaultConfigMap
    configMapKey: REACT_APP_APIHOSTPORT

env_be:
  - name: MONGO_CONN_STR
    configMapName: *defaultConfigMap
    configMapKey: MONGO_CONN_STR
  - name: MONGO_USERNAME
    configMapName: *defaultConfigMap
    configMapKey: MONGO_USERNAME
  - name: MONGO_PASSWORD
    configMapName: *defaultConfigMap
    configMapKey: MONGO_PASSWORD

app:
  name: zauni-app
  namespace: "gajdyzauni"
  containerExposeFe: &exposePort 8080
  containerExposeBe: &exposePortBe 8001

#image: {{ include "mongodb.image" . }}
#namespace: {{ include "mongodb.namespace" . | quote }}

global:
  namespaceOverride: "gajdyzauni"

containerSecurityContext:
  enabled: false
  runAsUser: 0
  
volumePermissions:
  securityContext:
    runAsUser: 0

mongodb:
  namespaceOverride: "gajdyzauni"
  image:
    tag: 4.4.15-debian-10-r8
  auth:
    enabled: false
    rootUser: mongoroot
    rootPassword: "admin"
    username: "gajdy"
    password: "admin"
    database: "platformsdb"
  service:
    type: ClusterIP
  persistence:
    enabled: false
  initdbScripts:
    init_script.js: |
      db = db.getSiblingDB("platformsdb");

      db.createUser({
        user: "mongoroot",
        pwd: "admin",
        roles:[{role: "readWrite" , db:"platformsdb"}]
      });

      db.createCollection("platforms");

      db.platforms.insertMany(
       [
         {
              "name": "openshift",
              "codedetail": {
                  "usecase": "Container platform",
                  "rank": 12,
                  "homepage": "https://openshift.com",
                  "download": "https://developers.redhat.com/products/codeready-containers/overview",
                  "votes": 0
              }
          },
          {
              "name": "kubernetes",
              "codedetail": {
                  "usecase": "Container orchestration platform ",
                  "rank": 38,
                 "homepage": "https://kubernetes.com",
                  "download": "https://kubernetes.io/docs/tasks/tools/install-minikube/",
                  "votes": 0
              }
          },
          {
              "name": "rancher",
              "codedetail": {
                  "usecase": "Container platform management ",
                  "rank": 50,
                  "homepage": "https://rancher.com/",
                  "download": "https://github.com/rancher/rancher",
                  "votes": 0
              }
          }
        ]    
      );


image_fe:
  repository: gajdy55/testfe
  pullPolicy: IfNotPresent
  name: zaunife
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2.0.0"

image_be:
  repository: gajdy55/testbe
  pullPolicy: IfNotPresent
  name: zaunibe
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.0.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  type: NodePort
  port: *exposePort
  portBe: *exposePortBe

resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
